[gd_scene load_steps=2 format=3 uid="uid://ogvpy33nt6jd"]

[sub_resource type="GDScript" id="GDScript_s47s2"]
script/source = "extends Node

# Network settings
const PORT = 28960
const MAX_CLIENTS = 16

# Service registry
var services = {}
var is_server = true

# Player registry
var players = {}

func _ready():
	print(\"Starting dedicated server...\")
	
	# Initialize server
	var peer = ENetMultiplayerPeer.new()
	var result = peer.create_server(PORT, MAX_CLIENTS)
	
	if result != OK:
		print(\"Failed to create server: \", result)
		get_tree().quit(1)
		return
		
	multiplayer.multiplayer_peer = peer
	print(\"Server listening on port \", PORT)
	
	# Connect network signals
	multiplayer.peer_connected.connect(_on_peer_connected)
	multiplayer.peer_disconnected.connect(_on_peer_disconnected)
	
	# Disable rendering
	get_viewport().disable_3d = true
	get_viewport().disable_2d = true
	
	# Register services
	register_services()

func register_services():
	# Register core services
	register_service(load(\"res://server/services/player_service.gd\").new(\"player\"))
	register_service(load(\"res://server/services/game_service.gd\").new(\"game\"))
	
	# Register your other services here
	# register_service(load(\"res://server/services/your_feature.gd\").new(\"feature_name\"))

func register_service(service: NetworkService):
	if services.has(service.service_name):
		push_error(\"Service already registered: \" + service.service_name)
		return
		
	services[service.service_name] = service
	add_child(service)
	service.register(self)
	print(\"Registered service: \" + service.service_name)

func _on_peer_connected(id):
	print(\"Client connected: \", id)
	
	# Register new player
	players[id] = {
		\"id\": id,
		\"name\": \"Player\" + str(id),
		\"authenticated\": false
	}
	
	# Let services know about the new player
	for service_name in services:
		if services[service_name].has_method(\"on_player_connected\"):
			services[service_name].on_player_connected(id)

func _on_peer_disconnected(id):
	print(\"Client disconnected: \", id)
	
	# Let services know about the disconnection
	for service_name in services:
		if services[service_name].has_method(\"on_player_disconnected\"):
			services[service_name].on_player_disconnected(id)
	
	# Remove player
	if players.has(id):
		players.erase(id)

func get_service(name: String) -> NetworkService:
	return services.get(name)
"

[node name="Server" type="Node"]
script = SubResource("GDScript_s47s2")

[node name="ServerInfo" type="Label" parent="."]
offset_left = 10.0
offset_top = 10.0
offset_right = 290.0
offset_bottom = 52.0
text = "DEDICATED SERVER RUNNING
Port: 28960"
